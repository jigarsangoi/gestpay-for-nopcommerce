//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.17929.
// 

namespace Nop.Plugin.Payments.GestPay
{
	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "WSCryptDecryptSoap", Namespace = "https://ecomm.sella.it/")]
	public partial class WSCryptDecrypt : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback EncryptOperationCompleted;

		private System.Threading.SendOrPostCallback DecryptOperationCompleted;

		/// <remarks/>
		public WSCryptDecrypt(bool isSandbox = true)
		{
			/* Dopo aver generato la classe, 
			 * sia con il servizio di test che con quello di produzione,
			 * ho verificato i 2 file generati e ho visto che erano 
			 * identici in tutto tranne che per l'Url impostato qui di seguito. 
			 * Ho aggiunto un parametro al metodo per settare il valore corretto per i 2 ambienti */
			if (isSandbox)
				this.Url = "https://testecomm.sella.it/gestpay/gestpayws/WSCryptDecrypt.asmx";
			else
				this.Url = "https://ecomms2s.sella.it/gestpay/gestpayws/WSCryptDecrypt.asmx";
		}

		/// <remarks/>
		public event EncryptCompletedEventHandler EncryptCompleted;

		/// <remarks/>
		public event DecryptCompletedEventHandler DecryptCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ecomm.sella.it/Encrypt", RequestNamespace = "https://ecomm.sella.it/", ResponseNamespace = "https://ecomm.sella.it/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public System.Xml.XmlNode Encrypt(
					string shopLogin,
					string uicCode,
					string amount,
					string shopTransactionId,
					string cardNumber = null,
					string expiryMonth = null,
					string expiryYear = null,
					string buyerName = null,
					string buyerEmail = null,
					string languageId = null,
					string cvv = null,
					string customInfo = null,
					string requestToken = null,
					string ppSellerProtection = null,
					ShippingDetails shippingDetails = null,
					[System.Xml.Serialization.XmlArrayItemAttribute("paymentType", IsNullable = false)] string[] paymentTypes = null)
		{
			object[] results = this.Invoke("Encrypt", new object[] {
					shopLogin,
					uicCode,
					amount,
					shopTransactionId,
					cardNumber,
					expiryMonth,
					expiryYear,
					buyerName,
					buyerEmail,
					languageId,
					cvv,
					customInfo,
					requestToken,
					ppSellerProtection,
					shippingDetails,
					paymentTypes});
			return ((System.Xml.XmlNode)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginEncrypt(
					string shopLogin,
					string uicCode,
					string amount,
					string shopTransactionId,
					string cardNumber,
					string expiryMonth,
					string expiryYear,
					string buyerName,
					string buyerEmail,
					string languageId,
					string cvv,
					string customInfo,
					string requestToken,
					string ppSellerProtection,
					ShippingDetails shippingDetails,
					string[] paymentTypes,
					System.AsyncCallback callback,
					object asyncState)
		{
			return this.BeginInvoke("Encrypt", new object[] {
					shopLogin,
					uicCode,
					amount,
					shopTransactionId,
					cardNumber,
					expiryMonth,
					expiryYear,
					buyerName,
					buyerEmail,
					languageId,
					cvv,
					customInfo,
					requestToken,
					ppSellerProtection,
					shippingDetails,
					paymentTypes}, callback, asyncState);
		}

		/// <remarks/>
		public System.Xml.XmlNode EndEncrypt(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.Xml.XmlNode)(results[0]));
		}

		/// <remarks/>
		public void EncryptAsync(
					string shopLogin,
					string uicCode,
					string amount,
					string shopTransactionId,
					string cardNumber,
					string expiryMonth,
					string expiryYear,
					string buyerName,
					string buyerEmail,
					string languageId,
					string cvv,
					string customInfo,
					string requestToken,
					string ppSellerProtection,
					ShippingDetails shippingDetails,
					string[] paymentTypes)
		{
			this.EncryptAsync(shopLogin, uicCode, amount, shopTransactionId, cardNumber, expiryMonth, expiryYear, buyerName, buyerEmail, languageId, cvv, customInfo, requestToken, ppSellerProtection, shippingDetails, paymentTypes, null);
		}

		/// <remarks/>
		public void EncryptAsync(
					string shopLogin,
					string uicCode,
					string amount,
					string shopTransactionId,
					string cardNumber,
					string expiryMonth,
					string expiryYear,
					string buyerName,
					string buyerEmail,
					string languageId,
					string cvv,
					string customInfo,
					string requestToken,
					string ppSellerProtection,
					ShippingDetails shippingDetails,
					string[] paymentTypes,
					object userState)
		{
			if ((this.EncryptOperationCompleted == null))
			{
				this.EncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptOperationCompleted);
			}
			this.InvokeAsync("Encrypt", new object[] {
					shopLogin,
					uicCode,
					amount,
					shopTransactionId,
					cardNumber,
					expiryMonth,
					expiryYear,
					buyerName,
					buyerEmail,
					languageId,
					cvv,
					customInfo,
					requestToken,
					ppSellerProtection,
					shippingDetails,
					paymentTypes}, this.EncryptOperationCompleted, userState);
		}

		private void OnEncryptOperationCompleted(object arg)
		{
			if ((this.EncryptCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.EncryptCompleted(this, new EncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ecomm.sella.it/Decrypt", RequestNamespace = "https://ecomm.sella.it/", ResponseNamespace = "https://ecomm.sella.it/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public System.Xml.XmlNode Decrypt(string shopLogin, string CryptedString)
		{
			object[] results = this.Invoke("Decrypt", new object[] {
					shopLogin,
					CryptedString});
			return ((System.Xml.XmlNode)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDecrypt(string shopLogin, string CryptedString, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("Decrypt", new object[] {
					shopLogin,
					CryptedString}, callback, asyncState);
		}

		/// <remarks/>
		public System.Xml.XmlNode EndDecrypt(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.Xml.XmlNode)(results[0]));
		}

		/// <remarks/>
		public void DecryptAsync(string shopLogin, string CryptedString)
		{
			this.DecryptAsync(shopLogin, CryptedString, null);
		}

		/// <remarks/>
		public void DecryptAsync(string shopLogin, string CryptedString, object userState)
		{
			if ((this.DecryptOperationCompleted == null))
			{
				this.DecryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptOperationCompleted);
			}
			this.InvokeAsync("Decrypt", new object[] {
					shopLogin,
					CryptedString}, this.DecryptOperationCompleted, userState);
		}

		private void OnDecryptOperationCompleted(object arg)
		{
			if ((this.DecryptCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DecryptCompleted(this, new DecryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://ecomm.sella.it/")]
	public partial class ShippingDetails
	{

		private string shipToNameField;

		private string shipToStreetField;

		private string shipToCityField;

		private string shipToStateField;

		private string shipToCountryCodeField;

		private string shipToZipField;

		private string shipToStreet2Field;

		/// <remarks/>
		public string shipToName
		{
			get
			{
				return this.shipToNameField;
			}
			set
			{
				this.shipToNameField = value;
			}
		}

		/// <remarks/>
		public string shipToStreet
		{
			get
			{
				return this.shipToStreetField;
			}
			set
			{
				this.shipToStreetField = value;
			}
		}

		/// <remarks/>
		public string shipToCity
		{
			get
			{
				return this.shipToCityField;
			}
			set
			{
				this.shipToCityField = value;
			}
		}

		/// <remarks/>
		public string shipToState
		{
			get
			{
				return this.shipToStateField;
			}
			set
			{
				this.shipToStateField = value;
			}
		}

		/// <remarks/>
		public string shipToCountryCode
		{
			get
			{
				return this.shipToCountryCodeField;
			}
			set
			{
				this.shipToCountryCodeField = value;
			}
		}

		/// <remarks/>
		public string shipToZip
		{
			get
			{
				return this.shipToZipField;
			}
			set
			{
				this.shipToZipField = value;
			}
		}

		/// <remarks/>
		public string shipToStreet2
		{
			get
			{
				return this.shipToStreet2Field;
			}
			set
			{
				this.shipToStreet2Field = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
	public delegate void EncryptCompletedEventHandler(object sender, EncryptCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class EncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal EncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.Xml.XmlNode Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.Xml.XmlNode)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
	public delegate void DecryptCompletedEventHandler(object sender, DecryptCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DecryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DecryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.Xml.XmlNode Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.Xml.XmlNode)(this.results[0]));
			}
		}
	}

}
